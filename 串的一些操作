/***************************************************
            顺序串的基本运算
   ***子串定位、串删除、串替换、串赋值****
     这四个函数书上没给代码，本人自己写的
***************************************************/
#include <stdio.h>
#include <stdlib.h>
#define MAXSIZE 100
int StrLength(char *s) //求串长
{
    int i=0;
    while(s[i]!='\0')
    {
        i++;
    }
    return i;
}
int StrCat(char s1[],char s2[]) //串连接
{
    int i,j,len1,len2;
    len1=StrLength(s1);
    len2=StrLength(s2);
    if(len1+len2>MAXSIZE-1)
        return 0;
    i=0;
    j=0;
    while(s1[i]!='\0')
        i++;
    while(s2[j]!='\0')
        s1[i++]=s2[j++];
    s1[i]='\0';
    return 1;
}
int SubStr(char *s,char t[],int i,int len) //求子串
{
    int j,slen;
    slen=StrLength(s);
    if(i<1 || i>slen || len<0 || len>slen-i+1)
        return 0;
    for(j=0; j<len; j++)
        t[j]=s[i+j-1];
    t[j]='\0';
    return 1;
}
int StrCmp(char *s1,char *s2) //串比较
{
    int i=0;
    while(s1[i]==s2[i] && s1[i]!='\0')
        i++;
    return (s1[i]-s2[i]);
}
int StrInsert(char *s,int i,char *t) //串插入
{
    char str[MAXSIZE];
    int j,k,len1,len2;
    len1=StrLength(s);
    len2=StrLength(t);
    if(i<0 || i>len1+1 || len1+len2>MAXSIZE-1)
        return 0;
    k=i;
    for(j=0; s[k]!='\0'; j++)
        str[j]=s[k++];
    str[j]='\0';
    j=0;
    i--;
    while(t[j]!='\0')
        s[i++]=t[j++];
    j=0;
    while(str[j]!='\0')
        s[i++]=str[j++];
    s[i]='\0';
    return 1;
}
int StrCopy(char t[],char *s)//串赋值
{
    int len=StrLength(s);
    if(len==0)
        return 0;
    int i=0;
    for(i=0; i<len; i++)
        t[i]=s[i];
    t[i]='\0';
    return 1;
}
int StrDelete(char s[],int i,int len)//串删除 传参时，第一个参数不能是char*类型，否则段错误
{
    int len1=StrLength(s);
    if(len1==0 || i<0 || i> len1 || len<=0 || len>len1-i+1)
        return 0;
    int j,k;
    j=i-1;
    k=i+len-1;
    while(s[k]!='\0')
    {
        s[j]=s[k];
        j++;
        k++;
    }
    s[j]='\0';
    return 1;
}
int StrIndex(char *s,char *t)//子串定位
{
    char data[MAXSIZE];
    int len1=StrLength(s);
    int len2=StrLength(t);
    if(len1==0 || len2==0 || len1<len2)
        return -1;
    int i=0;
    for(i=0; i<=len1-len2; i++)
    {
        if(s[i]==t[0])
        {
            SubStr(s,data,i+1,len2);
            if(StrCmp(t,data)==0)
                break;
        }
    }
    if(i>len1-len2)
        return -1;
    return i;
}
int StrRep(char *s,char *t,char *r)//串替换
{
    int len1=StrLength(s);
    int len2=StrLength(t);
    int len3=StrLength(r);
    int i,j,k;
    char data[MAXSIZE];
    if(len1==0 || len2==0 ||len3==0)
        return -1;
    int index=StrIndex(s,t);
    while(index>=0)
    {
        len1=StrLength(s);
        if(len1+len3>MAXSIZE)
            break;
        i=index;
        if(len2<=len3)
        {
            j=0;
            k=i+len2;
            while(s[k]!='\0')
            {
                data[j++]=s[k++];
            }
            data[j]='\0';
            for(j=0;j<len3;j++)
                s[i++]=r[j];
            j=0;
            while(data[j]!='\0')
                s[i++]=data[j++];
            s[i]='\0';
        }
        else
        {
            for(j=0; j<len3; j++)
            {
                s[i]=r[j];
                i++;
            }
            while(s[i]!='\0')
            {
                s[i]=s[i+1];
                i++;
            }
        }
        index=StrIndex(s,t);
    }
    return 1;
}
int main()
{
    //一些测试
    /*
    char ch1[MAXSIZE]="123456789";
    char ch2[MAXSIZE];
    char *ch3="456";
    printf("%d\n",StrLength(ch1));

    char t[MAXSIZE];
    char S[MAXSIZE]={"You are a student"};
    SubStr(ch1,t,3,4);
    printf("%s\n",t);

    StrInsert(S,4,"r teacher ");
    printf("%s\n",S);

    StrCat(S,ch1);
    printf("%s\n",S);

    StrCopy(ch2,ch1);
    printf("%s\n",ch2);

    StrDelete(ch1,2,3);//传参时，第一个参数不能是char*类型，否则段错误
    printf("%s\n",ch1);

    int index=StrIndex(ch1,ch3);
    printf("%d",index);
    */
    char ch1[MAXSIZE]="123456239";
    char *ch2="23";
    char *ch3="a";
    StrRep(ch1,ch2,ch3);
    printf("%s",ch1);
    return 0;
}


/**************************************************
                链串的基本运算
    比顺序串少了几个运算，有兴趣的可以自己写的加上
***************************************************/
#include <stdio.h>
#include <stdlib.h>
typedef struct snode
{
    char data;
    struct snode *next;
} LiString;

void StrAssingn(LiString **s,char str[]) //串赋值
{
    LiString *p,*r;
    int i;
    *s=(LiString*)malloc(sizeof(LiString));
    r=*s;
    for(i=0; str[i]!='\0'; i++)
    {
        p=(LiString*)malloc(sizeof(LiString));
        p->data=str[i];
        r->next=p;
        r=p;
    }
    r->next=NULL;
}
int StrLength(LiString *s)  //求串长
{
    int i=0;
    LiString *p=s->next;
    while(p!=NULL)
    {
        i++;
        p=p->next;
    }
    return i;
}

void StrCat(LiString *s,LiString *t)  //串连接
{
    #if 0  //本人自己所写，可能有Bug。
    LiString *p=s->next;
    while(p->next!=NULL)
        p=p->next;
    p->next=t->next;
    #endif // 0

    
    #if 1 //书上写的源代码
    LiString *p,*q,*r,*str;
    str=(LiString*)malloc(sizeof(LiString));
    r=str;
    p=t->next;
    while(p!=NULL)
    {
        q=(LiString*)malloc(sizeof(LiString));
        q->data=p->data;
        r->next=q;
        r=q;
        p=p->next;
    }
    r->next=NULL;
    p=s;
    while(p->next!=NULL)
        p=p->next;
    p->next=str->next;
    free(str);
    #endif // 0
}
void SubStr(LiString *s,LiString **str,int i,int len) //求子串
{
    LiString *p,*q,*r;
    int k;
    p=s->next;
    *str=(LiString*)malloc(sizeof(LiString));
    (*str)->next=NULL;
    r=*str;
    if(i<1 || i>StrLength(s) || len<0 || i+len>StrLength(s))
        goto L1;
    for(k=0;k<i-1;k++)
        p=p->next;
    for(k=0;k<len;k++)
    {
        q=(LiString*)malloc(sizeof(LiString));
        q->data=p->data;
        r->next=q;
        r=q;
        p=p->next;
    }
    r->next=NULL;
    L1: ;
}
void StrInsert(LiString *s,int i,LiString *t) //串插入
{
    LiString *p,*r;
    int k;
    p=s->next;
    for(k=0;k<i-1;k++)
        p=p->next;
    r=p->next;
    p->next=t->next;
    p=t;
    while(p->next!=NULL)
        p=p->next;
    p->next=r;
}
void StrPrint(LiString *s)
{
    LiString *p=s->next;
    while(p!=NULL)
    {
        printf("%c",p->data);
        p=p->next;
    }
    printf("\n");
}

int main()
{
// 都是做的一些测试
    char str[100]={"abcdefghij"};
    char ch1[100]={"klmn"};

    LiString *t;
    LiString *s;

    StrAssingn(&s,str);
    StrAssingn(&t,ch1);
//    StrPrint(s);
//
//    int len=StrLength(s);
//    printf("%d\n",len);

    StrCat(s,t);
    StrPrint(s);
//
//    LiString *ch2;
//    SubStr(s,&ch2,3,4);
//    StrPrint(ch2);
//
//    StrInsert(ch2,2,s);
//    StrPrint(ch2);

    return 0;
}
