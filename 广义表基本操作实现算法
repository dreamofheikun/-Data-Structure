/***********************************
     这是SeqStack.h内容
************************************/
#define MAXSIZE 100
typedef char datatype;
typedef struct
{
    datatype data[MAXSIZE];
    int top;
}SeqStack;
void Init_SeqStack(SeqStack **s);
int Empty_SeqStack(SeqStack*s);
void Push_SeqStack(SeqStack*s,datatype x);
void Pop_SeqStack(SeqStack*s,datatype *x);
void Top_SeqStack(SeqStack *s,datatype *x);
/*--------------------------------------------*/

/******************************
  这是SeqStack.c内容
******************************/
#include"SeqStack.h"
#include<stdio.h>
#include<stdlib.h>
void Init_SeqStack(SeqStack **s)
{
    *s=(SeqStack*)malloc(sizeof(SeqStack));
    (*s)->top=-1;
}
int Empty_SeqStack(SeqStack*s)
{
    if(s->top==-1)
        return 1;
    else
        return 0;
}
void Push_SeqStack(SeqStack*s,datatype x)
{
    if(s->top==MAXSIZE-1)
        printf("Stack if full!\n");
    else
    {
        s->top++;
        s->data[s->top]=x;
    }
}
void Pop_SeqStack(SeqStack*s,datatype *x)
{
    if(s->top==-1)
        printf("Stack is empty!\n");
    else
    {
        *x=s->data[s->top];
        s->top--;
    }
}
void Top_SeqStack(SeqStack *s,datatype *x)
{
    if(s->top==-1)
        printf("Stack is empty!\n");
    else
    {
        *x=s->data[s->top];
    }
}

/*---------------------------------------------------------------*/


#include <stdio.h>
#include <stdlib.h>
#include"SeqStack.h"

//孩子兄弟表示法的节点类型
typedef struct node
{
    int flag;                 //标志域
    union                     //元素节点和表节点共用内存
    {
        char data;            //元素节点数据域
        struct node *hp;      //表节点的表头指针
    }val;
    struct node *tp;          //指向下一个兄弟节点
}CBNode;                      //广义表节点类型

CBNode *Create(char ex[]);    //建立广义表的链式存储结构
void DispCB(CBNode *h);       //广义表输出算法
int CBDepth(CBNode *h);       //求广义表深度
int CBLength(CBNode *h);      //求广义表长度

CBNode *Create(char ex[])
{
    CBNode *p,*q=NULL,*h,*hp[MAXSIZE];
    SeqStack *s;
    char x,*y=&x;
    int i=0,j=0,b=0,t=0,k=0;
    Init_SeqStack(&s);
    while(ex[i]!='\0')
    {
        if(ex[i]==' ')
            i++;
        if(ex[i]=='(')
        {
            Push_SeqStack(s,ex[i]);
            p=(CBNode*)malloc(sizeof(CBNode));
            p->flag=1;
            p->tp=NULL;
            k=0;
            hp[j++]=p;
            if(q!=NULL)
                if(t==1)
                {
                    t=0;
                    q->tp=p;
                }
                else
                    q->val.hp=p;
            else
                q=p;
            if(b==0)
            {
                h=p;
                b=1;
            }
        }
        else if(ex[i]==')')
        {
            Top_SeqStack(s,y);
            if(*y=='(')
            {
                p->tp=NULL;
                if(ex[i-1]=='('|| (ex[i-1]==' ' && ex[i-1]=='('))
                    p->val.hp=NULL;
                Pop_SeqStack(s,y);
                if(j!=0)
                {
                    q=hp[--j];
                    if(ex[i+1]==',')
                    {
                        if(ex[i+2]=='(')
                        {
                            t=1;
                            k=0;
                            i++;
                            goto  l2;
                        }
                        i++;
                    }
                    k=1;
l2:
                    ;
                }
            }
            else
            {
                h=NULL;
                printf("Error!\n");
                goto l1;
            }
        }
        else if(ex[i]!=',')
        {
            if(k==0)
            {
                q=p;
                k=0;
            }
            p=(CBNode*)malloc(sizeof(CBNode));
            p->flag=0;
            p->val.data=ex[i];
            if(ex[i-1]=='(')
                q->val.hp=p;
            else
                q->tp=p;
        }
        else
        {
            q=p;
            t=1;
        }
        i++;
    }
    if(!Empty_SeqStack(s))
    {
        h=NULL;
        printf("Error!\n");
    }
l1:
    return h;
}
void DispCB(CBNode *h)
{
    if(h!=NULL)
    {
        if(h->flag==1)
        {
            printf("(");
            if(h->val.hp==NULL)
                printf(" ");
            else
                DispCB(h->val.hp);
        }
        else
            printf("%c",h->val.data);
        if(h->flag==1)
            printf(")");
        if(h->tp!=NULL)
        {
            printf(",");
            DispCB(h->tp);
        }
    }

}
int CBLength(CBNode *h)
{
    int n=0;
    h=h->val.hp;
    while(h!=NULL)
    {
        n++;
        h=h->tp;
    }
    return n;
}
int CBDepth(CBNode *h)
{
    int max=0,dep;
    if(h->flag==0)
        return 0;
    h=h->val.hp;
    if(h==NULL)
        return 1;
    while(h!=NULL)
    {
        if(h->flag==1)
        {
            dep=CBDepth(h);
            if(dep>max)
                max=dep;
        }
        h=h->tp;
    }
    return max+1;
}
int main()
{
    char ex[]={"(a,(b,c,d),e)"};
    CBNode *s1=Create(ex);
    DispCB(s1);
    printf("\n");
    printf("表长度：%d\n",CBLength(s1));
    printf("表深度：%d\n",CBDepth(s1));

    printf("Hello world!\n");
    return 0;
}
