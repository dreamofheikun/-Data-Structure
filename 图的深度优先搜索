#include <stdio.h>
#include <stdlib.h>

#define MAXSIZE 100

int visited[MAXSIZE];
typedef struct node
{
    int adjvex;
    struct node *next;
}EdgeNode;

typedef struct vnode
{
    int vertex;
    EdgeNode *firstedge;
}VertexNode;

void CreateAdjlist(VertexNode g[],int e,int n)
{
    EdgeNode *p;
    int i,j,k;
    printf("Input data of vetex(0~n-1);\n");
    for(i=0;i<n;i++)
    {
        g[i].vertex=i;
        g[i].firstedge=NULL;
    }
    for(k=1;k<=e;k++)
    {
        printf("Input edge of(i,j):");
        scanf("%d%d",&i,&j);
        p=(EdgeNode*)malloc(sizeof(EdgeNode));
        p->adjvex=j;
        p->next=g[i].firstedge;
        g[i].firstedge=p;
        p=(EdgeNode*)malloc(sizeof(EdgeNode));
        p->adjvex=i;
        p->next=g[j].firstedge;
        g[j].firstedge=p;
    }
}
void DFS(VertexNode g[],int i)
{
    EdgeNode *p;
    printf("%4d",g[i].vertex);
    visited[i]=1;
    p=g[i].firstedge;
    while(p!=NULL)
    {
        if(!visited[p->adjvex])
            DFS(g,p->adjvex);
        p=p->next;
    }
}
void DFSTraverse(VertexNode g[],int n)
{//深度优先搜索遍历用邻接表存储图，其中g为定点表，n为顶点个数。
    int i=0;
    for(i=0;i<n;i++)
    {
        visited[i]=0;
    }
    for(i=0;i<n;i++)
    {
        if(!visited[i])
            DFS(g,i);
    }

}
void AdlistPrint(VertexNode g[],int n)
{
    int i;
    EdgeNode *p;
    for(i=0;i<n;i++)
    {
        p=g[i].firstedge;
        printf("%d:",g[i].vertex);
        while (p!=NULL)
        {
            printf("%d->",p->adjvex);
            p=p->next;
        }
        printf("NULL\n");
    }
}


int main()
{
    VertexNode g[MAXSIZE];
    CreateAdjlist(g,7,7);
    AdlistPrint(g,7);
    DFSTraverse(g,7);
    return 0;
}
